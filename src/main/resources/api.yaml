openapi: "3.0.0"
info:
  title: Lazychef
  version: 1.0.0
  description: Lazychef API
paths:
  #  users API
  /users:
    get:
      operationId: getUsersList
      description: Get users list
      responses:
        '200':
          description: Users list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersList'
    post:
      operationId: createUser
      description: Create user
      requestBody:
        description: User details to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: string
        '409':
          description: User with this personal data already exists.
          content:
            application/json:
              schema:
                type: string
  /users/{id}:
    get:
      operationId: getUserDetails
      description: Get user details
      parameters:
        - in: path
          name: id
          description: The ID of the specific user for which you want details.
          example: 1
          schema:
            type: string
          required: true
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User with this id was not found.
          content:
            application/json:
              schema:
                type: string
    delete:
      operationId: deleteUser
      description: Delete user
      parameters:
        - in: path
          name: id
          description: The ID of the specific user witch you want delete.
          example: 1
          schema:
            type: string
          required: true
      responses:
        '200':
          description: User deleted successfully
  #  food API
  /food:
    get:
      operationId: getFoodList
      description: Get food list
      responses:
        '200':
          description: Food list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FoodList'
    post:
      operationId: createFood
      description: Create food
      requestBody:
        description: Food details to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Food'
      responses:
        '201':
          description: Food created successfully
          content:
            application/json:
              schema:
                type: string
        '409':
          description: Food with this name already exists.
          content:
            application/json:
              schema:
                type: string
  /food/{id}:
    delete:
      operationId: deleteFood
      description: Delete food
      parameters:
        - in: path
          name: id
          description: The ID of the specific food you want to delete.
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Food deleted successfully
    get:
      operationId: getFoodDetails
      description: Get food details
      parameters:
        - in: path
          name: id
          description: The ID of the specific food for which you want details.
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Food details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Food'
        '404':
          description: Food with this id was not found.
          content:
            application/json:
              schema:
                type: string
    put:
      operationId: updateFood
      description: Update food
      requestBody:
        description: Food details to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Food'
      parameters:
        - in: path
          name: id
          description: The ID of the specific food which you want to edit.
          example: 1
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Food updated successfully

  #  order API
  /order:
    get:
      operationId: getOrderList
      description: Get order list
      responses:
        '200':
          description: Order list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderList'
    post:
      operationId: createOrder
      description: Create order
      requestBody:
        description: Order details to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                type: string
  /order/{id}:
    get:
      operationId: getOrderDetails
      description: Get order details
      parameters:
        - in: path
          name: id
          description: The ID of the specific order for which you want details.
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Order details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Order with this id was not found.
          content:
            application/json:
              schema:
                type: string
    put:
      operationId: updateOrder
      description: Update order
      requestBody:
        description: Order details to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      parameters:
        - in: path
          name: id
          description: The ID of the specific order which you want to edit.
          example: 1
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Order updated successfully

  #  order-food API
  /orders-food:
    post:
      operationId: createOrdersFood
      description: Create orders-food connection
      requestBody:
        description: Orders-food connection details.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrdersFood'
      responses:
        '200':
          description: OrdersFood created successfully
          content:
            application/json:
              schema:
                type: string
    get:
      operationId: getOrdersFood list
      description: Get list of orders-food connections
      responses:
        '200':
          description: Order list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrdersFoodList'

  /orders-food/{id}:
    put:
      operationId: updateOrdersFood
      description: Update food in order
      requestBody:
        description: Orders-food connection details.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrdersFood'
      parameters:
        - in: path
          name: id
          description: The ID of the specific order-food which you want edit.
          example: 1
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OrdersFood updated successfully
        '404':
          description: OrdersFood with this id was not found.
          content:
            application/json:
              schema:
                type: string

components:
  schemas:
    #   USERS
    User:
      type: object
      properties:
        id:
          type: integer
        login:
          type: string
        password:
          type: string
        name:
          type: string
        surname:
          type: string
        role:
          $ref: '#/components/schemas/Role'
      required:
        - login
        - password
        - name
        - surname
        - role
    UsersList:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'
    Role:
      type: string
      enum:
        - OWNER
        - COOK
        - WAITER

    #  FOOD
    Food:
      type: object
      properties:
        id:
          type: integer
        cost:
          type: number
        name:
          type: string
        type:
          $ref: '#/components/schemas/FoodType'
      required:
        - cost
        - name
        - type
    FoodList:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/Food'
    FoodType:
      type: string
      enum:
        - DRINK
        - DISH

    #   ORDER
    Order:
      type: object
      properties:
        id:
          type: integer
        state:
          $ref: '#/components/schemas/OrderState'
        tableNr:
          type: integer
      required:
        - tableNr
    OrderList:
      type: object
      properties:
        orders:
          type: array
          items:
            $ref: '#/components/schemas/Order'
    OrderState:
      type: string
      enum:
        - READY
        - IN_PROGRESS
        - NOT_READY
      default: NOT_READY

    #   ORDERS-FOOD
    OrdersFood:
      type: object
      properties:
        id:
          type: integer
        comments:
          type: string
        foodState:
          $ref: '#/components/schemas/FoodState'
        foodId:
          type:
            integer
        orderId:
          type:
            integer
      required:
        - foodId
        - orderId
    FoodState:
      type: string
      enum:
        - READY
        - IN_PROGRESS
        - NOT_READY
      default: NOT_READY
    OrdersFoodList:
      type: object
      properties:
        orders:
          type: array
          items:
            $ref: '#/components/schemas/OrdersFood'